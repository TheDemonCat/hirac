#Использовать irac

Перем ПараметрыПодключения;
Перем Агенты;
Перем ОписанияКластеров;
Перем ОписанияСерверов;
Перем ОписанияРабочихПроцессов;
Перем ОписанияИнформационныхБаз;
Перем ОписанияСеансов;
Перем ОписанияСоединений;

#Область ОбработчикиСобытийОбъекта

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//   НастройкиПодключения     - Строка,     - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура ПриСозданииОбъекта(Знач НастройкиПодключения = Неопределено)

	ИнициализироватьАгентыУправленияКластерами(НастройкиПодключения);

КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // ОбработчикиСобытийОбъекта

#Область ПрограммныйИнтерфейс

// Функция - возвращает структуру с подключениями к агентам управления кластерами
//
// Возвращаемое значение:
//   Структура     - структура с подключениями к агентам управления кластерами
//
Функция Агенты() Экспорт
	
	Возврат Агенты;

КонецФункции // Агенты()

// Функция - возвращает структуру параметров подключения к агентам управления кластерами
//
// Возвращаемое значение:
//   Структура     - структура параметров подключения к агентам управления кластерами
//
Функция ПараметрыПодключения() Экспорт
	
	Возврат ПараметрыПодключения;

КонецФункции // ПараметрыПодключения()

// Процедура инициализирует подключения к агентам управления кластерами
//
// Параметры:
//   НастройкиПодключения     - Строка,     - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура ИнициализироватьАгентыУправленияКластерами(Знач НастройкиПодключения = Неопределено) Экспорт
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Структура") Тогда
		ПараметрыПодключения = НастройкиПодключения;
	ИначеЕсли ТипЗнч(НастройкиПодключения) = Тип("Строка") Тогда
		ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзМакетаJSON(НастройкиПодключения, Истина);
	Иначе
		ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзМакетаJSON("/config/racsettings", Истина);
	КонецЕсли;

	Агенты = Новый Соответствие();

	ПараметрыСервисов  = ОбщегоНазначения.ПолучитьЗначениеНастройки("ras"    , ПараметрыПодключения);
	ПараметрыКластеров = ОбщегоНазначения.ПолучитьЗначениеНастройки("cluster", ПараметрыПодключения);

	Для Каждого ТекПараметры Из ПараметрыСервисов Цикл
	
		Если ВРег(ТекПараметры.Ключ) = "__DEFAULT" И НЕ ПараметрыСервисов.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;

		УправлениеКластером = ИнициализироватьАгента(ПараметрыПодключения, ТекПараметры.Ключ);

		ОписаниеАгента = Новый Структура();
		ОписаниеАгента.Вставить("Имя"        , ВРег(ТекПараметры.Ключ));
		ОписаниеАгента.Вставить("Резервирует", ВРег(ТекПараметры.Значение["reserves"]));
		ОписаниеАгента.Вставить("Агент"      , УправлениеКластером);

		Агенты.Вставить(ВРег(ТекПараметры.Ключ), ОписаниеАгента);

		УстановитьПараметрыКластеровАгента(УправлениеКластером, ПараметрыКластеров);

	КонецЦикла;

КонецПроцедуры // ИнициализироватьАгентыУправленияКластерами()

Процедура ОбновитьОбъектыКластера(Знач ТипОбъекта, Знач Обновить = Ложь,
	                               Знач Поля = "_all", Знач Фильтр = Неопределено) Экспорт

	Если НЕ НужноОбновитьОбъектыКластера(ТипОбъекта, Обновить) Тогда
		Возврат;
	КонецЕсли;

	ДобавленныеОбъекты = Новый Соответствие();

	ОбъектыКластера = Новый Массив();

	Для Каждого ТекАгент Из Агенты Цикл

		ОписаниеАгента = ТекАгент.Значение;

		Если НЕ ИспользоватьАгент(ОписаниеАгента) Тогда
			Продолжить;
		КонецЕсли;

		ОбъектыАгента = ОбъектыАгента(ОписаниеАгента, ТипОбъекта, Поля);

		Для Каждого ТекОбъект Из ОбъектыАгента Цикл
			Если ДобавленныеОбъекты[ТекОбъект[ТипОбъекта]] = Неопределено Тогда
				ДобавленныеОбъекты.Вставить(ТекОбъект[ТипОбъекта], Истина);
			Иначе
				Продолжить;
			КонецЕсли;

			Если НЕ ОбщегоНазначения.ОбъектСоответствуетФильтру(ТекОбъект, Фильтр) Тогда
				Продолжить;
			КонецЕсли;

			ОбъектыКластера.Добавить(ТекОбъект);
		КонецЦикла;

	КонецЦикла;

	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Кластеры) Тогда
		ОписанияКластеров = ОбъектыКластера;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Серверы) Тогда
		ОписанияСерверов = ОбъектыКластера;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().РабочиеПроцессы) Тогда
		ОписанияРабочихПроцессов = ОбъектыКластера;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().ИнформационныеБазы) Тогда
		ОписанияИнформационныхБаз = ОбъектыКластера;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Сеансы) Тогда
		ОписанияСеансов = ОбъектыКластера;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Соединения) Тогда
		ОписанияСоединений = ОбъектыКластера;
	КонецЕсли;

КонецПроцедуры // ОбновитьОбъектыКластера()

Функция ОбъектыКластера(Знач ТипОбъекта) Экспорт

	Результат = Неопределено;

	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Кластеры) Тогда
		Результат = ОписанияКластеров;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Серверы) Тогда
		Результат = ОписанияСерверов;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().РабочиеПроцессы) Тогда
		Результат = ОписанияРабочихПроцессов;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().ИнформационныеБазы) Тогда
		Результат = ОписанияИнформационныхБаз;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Сеансы) Тогда
		Результат = ОписанияСеансов;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Соединения) Тогда
		Результат = ОписанияСоединений;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбъектыКластера()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПолучениеДанныхКластера

Функция КластерыАгента(Знач Агент, Знач Поля)

	КластерыАгента = Новый Массив();

	СписокКластеров = Агент.Кластеры().Список(, , Истина);

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипыОбъектовКластера().Кластеры);

	Для Каждого ТекКластер Из СписокКластеров Цикл

		ОписаниеКластера = Новый Соответствие();
		Если НЕ (Поля.Найти("AGENT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
			ОписаниеКластера.Вставить("agent", СтрШаблон("%1:%2",
			                                             Агент.АдресСервераАдминистрирования(),
			                                             Агент.ПортСервераАдминистрирования()));
		КонецЕсли;
		Если НЕ (Поля.Найти("COUNT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
			ОписаниеКластера.Вставить("count", 1);
		КонецЕсли;

		Для Каждого ТекПолеОбъекта Из ПоляОбъекта Цикл
			
			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			Если Поля.Найти(ВРег(ИмяПоля)) = Неопределено И Поля.Найти("_ALL") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеЭлемента = ТекКластер[ТекПолеОбъекта.Имя];
			Если ИмяПоля = "cluster" Тогда
				ОписаниеКластера.Вставить("cluster-label", СтрШаблон("%1:%2",
				                                                     ТекКластер.Получить("АдресСервера"),
				                                                     ТекКластер.Получить("ПортСервера")));
			ИначеЕсли ИмяПоля = "name" И Лев(ЗначениеЭлемента, 1) = """"  И Прав(ЗначениеЭлемента, 1) = """" Тогда
				ЗначениеЭлемента = Сред(ЗначениеЭлемента, 2, СтрДлина(ЗначениеЭлемента) - 2);
			КонецЕсли;
			ОписаниеКластера.Вставить(ИмяПоля, ЗначениеЭлемента);
		КонецЦикла;

		КластерыАгента.Добавить(ОписаниеКластера);

	КонецЦикла;

	Возврат КластерыАгента;

КонецФункции // КластерыАгента()

#КонецОбласти // ПолучениеДанныхКластера

#Область ПолучениеДанныхСерверов

Функция СерверыАгента(Знач Агент, Знач Поля)

	СерверыАгента = Новый Массив();

	СписокКластеров = Агент.Кластеры().Список();

	Для Каждого ТекКластер Из СписокКластеров Цикл

		СерверыКластера = СерверыКластера(ТекКластер, Поля);

		Для Каждого ТекСервер Из СерверыКластера Цикл
			
			Если НЕ (Поля.Найти("AGENT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСервер.Вставить("agent", СтрШаблон("%1:%2",
				                                      Агент.АдресСервераАдминистрирования(),
				                                      Агент.ПортСервераАдминистрирования()));
			КонецЕсли;
			Если НЕ (Поля.Найти("CLUSTER") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСервер.Вставить("cluster"      , ТекКластер.Ид());
				ТекСервер.Вставить("cluster-host" , ТекКластер.АдресСервера());
				ТекСервер.Вставить("cluster-port" , ТекКластер.ПортСервера());
				ТекСервер.Вставить("cluster-label",
				                   СтрШаблон("%1:%2", ТекКластер.АдресСервера(), ТекКластер.ПортСервера()));
			КонецЕсли;
			Если НЕ (Поля.Найти("COUNT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСервер.Вставить("count", 1);
			КонецЕсли;
	
			СерверыАгента.Добавить(ТекСервер);

		КонецЦикла;

	КонецЦикла;

	Возврат СерверыАгента;

КонецФункции // СерверыАгента()

Функция СерверыКластера(Знач Кластер, Знач Поля)

	СерверыКластера = Новый Массив();
	
	СписокСерверов = Кластер.Серверы().Список(, , Истина);

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипыОбъектовКластера().Серверы);

	Для Каждого ТекСервер Из СписокСерверов Цикл

		ОписаниеСервера = Новый Соответствие();

		Для Каждого ТекПолеОбъекта Из ПоляОбъекта Цикл

			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			Если Поля.Найти(ВРег(ИмяПоля)) = Неопределено И Поля.Найти("_ALL") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеЭлемента = ТекСервер[ТекПолеОбъекта.Имя];
			Если ИмяПоля = "server" Тогда
				ОписаниеСервера.Вставить("server-host" , ТекСервер.Получить("АдресАгента"));
				ОписаниеСервера.Вставить("server-label", СтрШаблон("%1:%2",
				                                                   ТекСервер.Получить("АдресАгента"),
				                                                   ТекСервер.Получить("ПортАгента")));
			ИначеЕсли ИмяПоля = "name" И Лев(ЗначениеЭлемента, 1) = """"  И Прав(ЗначениеЭлемента, 1) = """" Тогда
				ЗначениеЭлемента = Сред(ЗначениеЭлемента, 2, СтрДлина(ЗначениеЭлемента) - 2);
			КонецЕсли;
			ОписаниеСервера.Вставить(ИмяПоля, ЗначениеЭлемента);
		КонецЦикла;

		СерверыКластера.Добавить(ОписаниеСервера);

	КонецЦикла;

	Возврат СерверыКластера;
	
КонецФункции // СерверыКластера()

#КонецОбласти // ПолучениеДанныхСерверов

#Область ПолучениеДанныхПроцессов

Функция ПроцессыАгента(Знач Агент, Знач Поля)

	ПроцессыАгента = Новый Массив();

	СписокКластеров = Агент.Кластеры().Список();

	Для Каждого ТекКластер Из СписокКластеров Цикл
	
		ПроцессыКластера = ПроцессыКластера(ТекКластер, Поля);

		Для Каждого ТекПроцесс Из ПроцессыКластера Цикл
			
			Если НЕ (Поля.Найти("AGENT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекПроцесс.Вставить("agent", СтрШаблон("%1:%2",
				                                     Агент.АдресСервераАдминистрирования(),
				                                     Агент.ПортСервераАдминистрирования()));
			КонецЕсли;
			Если НЕ (Поля.Найти("CLUSTER") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекПроцесс.Вставить("cluster"      , ТекКластер.Ид());
				ТекПроцесс.Вставить("cluster-host" , ТекКластер.АдресСервера());
				ТекПроцесс.Вставить("cluster-port" , ТекКластер.ПортСервера());
				ТекПроцесс.Вставить("cluster-label",
				                    СтрШаблон("%1:%2", ТекКластер.АдресСервера(), ТекКластер.ПортСервера()));
			КонецЕсли;
			Если НЕ (Поля.Найти("COUNT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекПроцесс.Вставить("count", 1);
			КонецЕсли;

			ПроцессыАгента.Добавить(ТекПроцесс);

		КонецЦикла;

	КонецЦикла;

	Возврат ПроцессыАгента;

КонецФункции // ПроцессыАгента()

Функция ПроцессыКластера(Знач Кластер, Знач Поля)

	ПроцессыКластера = Новый Массив();

	СписокПроцессов = Кластер.РабочиеПроцессы().Список(, , Истина);

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипыОбъектовКластера().РабочиеПроцессы);

	Для Каждого ТекПроцесс Из СписокПроцессов Цикл
		
		ОписаниеПроцесса = Новый Соответствие();

		Для Каждого ТекПолеОбъекта Из ПоляОбъекта Цикл

			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			Если Поля.Найти(ВРег(ИмяПоля)) = Неопределено И Поля.Найти("_ALL") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеЭлемента = ТекПроцесс[ТекПолеОбъекта.Имя];
			Если ИмяПоля = "process" Тогда
				ОписаниеПроцесса.Вставить("process-host" , ТекПроцесс.Получить("АдресСервера"));
				ОписаниеПроцесса.Вставить("process-label", СтрШаблон("%1:%2",
				                                                     ТекПроцесс.Получить("АдресСервера"),
				                                                     ТекПроцесс.Получить("ПортСервера")));
			ИначеЕсли ИмяПоля = "started-at" Тогда
				Попытка
					ОписаниеПроцесса.Вставить("duration", ТекущаяДата() - ЗначениеЭлемента);
				Исключение
					ОписаниеПроцесса.Вставить("duration", 0);
				КонецПопытки;
			КонецЕсли;
			ОписаниеПроцесса.Вставить(ИмяПоля, ЗначениеЭлемента);

		КонецЦикла;

		ПроцессыКластера.Добавить(ОписаниеПроцесса);

	КонецЦикла;

	Возврат ПроцессыКластера;
	
КонецФункции // ПроцессыКластера()

#КонецОбласти // ПолучениеДанныхПроцессов

#Область ПолучениеДанныхИБ

Функция ИБАгента(Знач Агент, Знач Поля)

	ИБАгента = Новый Массив();

	СписокКластеров = Агент.Кластеры().Список();

	Для Каждого ТекКластер Из СписокКластеров Цикл

		ИБКластера = ИБКластера(ТекКластер, Поля);

		Для Каждого ТекИБ Из ИБКластера Цикл
			
			Если ДобавитьПоле(Поля, "AGENT") Тогда
				ТекИБ.Вставить("agent", СтрШаблон("%1:%2",
				                                  Агент.АдресСервераАдминистрирования(),
				                                  Агент.ПортСервераАдминистрирования()));
			КонецЕсли;
			Если ДобавитьПоле(Поля, "AGENT") Тогда
				ТекИБ.Вставить("cluster"      , ТекКластер.Ид());
				ТекИБ.Вставить("cluster-host" , ТекКластер.АдресСервера());
				ТекИБ.Вставить("cluster-port" , ТекКластер.ПортСервера());
				ТекИБ.Вставить("cluster-label",
				               СтрШаблон("%1:%2", ТекКластер.АдресСервера(), ТекКластер.ПортСервера()));
			КонецЕсли;
			Если ДобавитьПоле(Поля, "AGENT") Тогда
				ТекИБ.Вставить("count", 1);
			КонецЕсли;
	
			ИБАгента.Добавить(ТекИБ);

		КонецЦикла;

	КонецЦикла;

	Возврат ИБАгента;

КонецФункции // ИБАгента()

Функция ИБКластера(Знач Кластер, Знач Поля)

	ИБКластера = Новый Массив();
	
	СписокИБ = Кластер.ИнформационныеБазы().Список();

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипыОбъектовКластера().ИнформационныеБазы);

	ПолноеОписание = Ложь;
	Для Каждого ТекПоле Из Поля Цикл
		Если НЕ ПолеОсновнойИнформации(ТекПоле) Тогда
			ПолноеОписание = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекИБ Из СписокИБ Цикл

		Если ПолноеОписание И НЕ ТекИБ.ПолноеОписание() Тогда
			ТекИБ.ОбновитьДанные(Истина);
		КонецЕсли;

		ОписаниеИБ = Новый Соответствие();

		Для Каждого ТекПолеОбъекта Из ПоляОбъекта Цикл

			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			Если НЕ ДобавитьПоле(Поля, ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеЭлемента = ТекИБ.Получить(ТекПолеОбъекта.Имя);
			Если ИмяПоля = "descr" И Лев(ЗначениеЭлемента, 1) = """"  И Прав(ЗначениеЭлемента, 1) = """" Тогда
				ЗначениеЭлемента = Сред(ЗначениеЭлемента, 2, СтрДлина(ЗначениеЭлемента) - 2);
			КонецЕсли;
			ОписаниеИБ.Вставить(ИмяПоля, ЗначениеЭлемента);
		КонецЦикла;

		ИБКластера.Добавить(ОписаниеИБ);

	КонецЦикла;

	Возврат ИБКластера;
	
КонецФункции // ИБКластера()

Функция ПолеОсновнойИнформации(ИмяПоля)

	КраткиеСведения = "INFOBASE, NAME, CLUSTER, AGENT, DESCR, COUNT, _NO, _SUMMARY";

	Возврат НЕ Найти(КраткиеСведения, ВРег(ИмяПоля)) = 0;

КонецФункции // ПолеОсновнойИнформации()

Функция ДобавитьПоле(ДобавляемыеПоля, ИмяПоля)

	Если НЕ ДобавляемыеПоля.Найти("_ALL") = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Если НЕ ДобавляемыеПоля.Найти("_SUMMARY") = Неопределено И ПолеОсновнойИнформации(ИмяПоля) Тогда
		Возврат Истина;
	КонецЕсли;

	Если НЕ ДобавляемыеПоля.Найти(ВРег(ИмяПоля)) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции // ПолеОсновнойИнформации()

#КонецОбласти // ПолучениеДанныхИБ

#Область ПолучениеДанныхСеансов

Функция СеансыАгента(Знач Агент, Знач Поля)

	СеансыАгента = Новый Массив();

	СписокКластеров = Агент.Кластеры().Список();

	Для Каждого ТекКластер Из СписокКластеров Цикл

		СеансыКластера = СеансыКластера(ТекКластер, Поля);

		Для Каждого ТекСеанс Из СеансыКластера Цикл
			
			Если НЕ (Поля.Найти("AGENT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСеанс.Вставить("agent", СтрШаблон("%1:%2",
				                                     Агент.АдресСервераАдминистрирования(),
				                                     Агент.ПортСервераАдминистрирования()));
			КонецЕсли;
			Если НЕ (Поля.Найти("CLUSTER") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСеанс.Вставить("cluster"      , ТекКластер.Ид());
				ТекСеанс.Вставить("cluster-host" , ТекКластер.АдресСервера());
				ТекСеанс.Вставить("cluster-port" , ТекКластер.ПортСервера());
				ТекСеанс.Вставить("cluster-label",
				                  СтрШаблон("%1:%2", ТекКластер.АдресСервера(), ТекКластер.ПортСервера()));
			КонецЕсли;
			Если НЕ (Поля.Найти("COUNT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСеанс.Вставить("count", 1);
			КонецЕсли;

			СеансыАгента.Добавить(ТекСеанс);

		КонецЦикла;

	КонецЦикла;

	Возврат СеансыАгента;

КонецФункции // СеансыАгента()

Функция СеансыКластера(Знач Кластер, Знач Поля)

	ОписанияИдИнформационныхБаз = ОписанияИдИнформационныхБаз(Кластер);
	
	ОписанияИдРабочихПроцессов = ОписанияИдРабочихПроцессов(Кластер);

	СеансыКластера = Новый Массив();

	СписокСеансов = Кластер.Сеансы().Список();

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипыОбъектовКластера().Сеансы);

	Для Каждого ТекСеанс Из СписокСеансов Цикл
		
		ОписаниеСеанса = Новый Соответствие();

		ЕстьОшибкиЗаполненияОписания = Ложь;

		Для Каждого ТекПолеОбъекта Из ПоляОбъекта Цикл

			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			Если Поля.Найти(ВРег(ИмяПоля)) = Неопределено И Поля.Найти("_ALL") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ЗначениеЭлемента = ТекСеанс.Получить(ТекПолеОбъекта.Имя, -1);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Сообщить(СтрШаблон("Ошибка получения поля %1 описания сеанса: %2", ТекПолеОбъекта.Имя, ТекстОшибки),
				                   СтатусСообщения.ОченьВажное);
				ЕстьОшибкиЗаполненияОписания = Истина;
				Прервать;
			КонецПопытки;
			Если ИмяПоля = "infobase" Тогда
				ОписаниеСеанса.Вставить("infobase-label", ОписанияИдИнформационныхБаз[ЗначениеЭлемента]);
			ИначеЕсли ИмяПоля = "process" Тогда
				ОписаниеСеанса.Вставить("process-label", "_none");
				ОписаниеСеанса.Вставить("process-host" , "_none");
				ОписаниеИдПроцесса = ОписанияИдРабочихПроцессов[ЗначениеЭлемента];
				Если ОписаниеИдПроцесса = Неопределено И НЕ ЗначениеЭлемента = ОбщегоНазначения.ПустойГУИД() Тогда
					ОписанияИдРабочихПроцессов = ОписанияИдРабочихПроцессов(Кластер, Истина);
					ОписаниеИдПроцесса = ОписанияИдРабочихПроцессов[ЗначениеЭлемента];
				КонецЕсли;
				Если НЕ ОписаниеИдПроцесса = Неопределено Тогда
					ОписаниеСеанса.Вставить("process-label", ОписаниеИдПроцесса.Метка);
					ОписаниеСеанса.Вставить("process-host" , ОписаниеИдПроцесса.Сервер);
				КонецЕсли;
			ИначеЕсли ИмяПоля = "started-at" Тогда
				Попытка
					ОписаниеСеанса.Вставить("duration", ТекущаяДата() - ЗначениеЭлемента);
				Исключение
					ОписаниеСеанса.Вставить("duration", 0);
				КонецПопытки;
			КонецЕсли;
			ОписаниеСеанса.Вставить(ИмяПоля, ЗначениеЭлемента);

		КонецЦикла;

		Если ЕстьОшибкиЗаполненияОписания Тогда
			Продолжить;
		КонецЕсли;

		СеансыКластера.Добавить(ОписаниеСеанса);

	КонецЦикла;

	Возврат СеансыКластера;
	
КонецФункции // СеансыКластера()

#КонецОбласти // ПолучениеДанныхСеансов

#Область ПолучениеДанныхСоединений

Функция СоединенияАгента(Знач Агент, Знач Поля)

	СоединенияАгента = Новый Массив();

	СписокКластеров = Агент.Кластеры().Список();

	Для Каждого ТекКластер Из СписокКластеров Цикл

		СоединенияКластера = СоединенияКластера(ТекКластер, Поля);

		Для Каждого ТекСоединение Из СоединенияКластера Цикл
			
			Если НЕ (Поля.Найти("AGENT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСоединение.Вставить("agent", СтрШаблон("%1:%2",
				                                          Агент.АдресСервераАдминистрирования(),
				                                          Агент.ПортСервераАдминистрирования()));
			КонецЕсли;
			Если НЕ (Поля.Найти("CLUSTER") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСоединение.Вставить("cluster"      , ТекКластер.Ид());
				ТекСоединение.Вставить("cluster-host" , ТекКластер.АдресСервера());
				ТекСоединение.Вставить("cluster-port" , ТекКластер.ПортСервера());
				ТекСоединение.Вставить("cluster-label",
				                       СтрШаблон("%1:%2", ТекКластер.АдресСервера(), ТекКластер.ПортСервера()));
			КонецЕсли;
			Если НЕ (Поля.Найти("COUNT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекСоединение.Вставить("count", 1);
			КонецЕсли;

			СоединенияАгента.Добавить(ТекСоединение);

		КонецЦикла;

	КонецЦикла;

	Возврат СоединенияАгента;

КонецФункции // СоединенияАгента()

Функция СоединенияКластера(Знач Кластер, Знач Поля)

	ОписанияИдИнформационныхБаз = ОписанияИдИнформационныхБаз(Кластер);
	
	ОписанияИдРабочихПроцессов = ОписанияИдРабочихПроцессов(Кластер);
	
	СоединенияКластера = Новый Массив();

	СписокСоединений = Кластер.Соединения().Список();

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипыОбъектовКластера().Соединения);

	Для Каждого ТекСоединение Из СписокСоединений Цикл
		
		ОписаниеСоединения = Новый Соответствие();

		ЕстьОшибкиЗаполненияОписания = Ложь;
		
		Для Каждого ТекПолеОбъекта Из ПоляОбъекта Цикл

			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			Если Поля.Найти(ВРег(ИмяПоля)) = Неопределено И Поля.Найти("_ALL") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ЗначениеЭлемента = ТекСоединение.Получить(ТекПолеОбъекта.Имя, -1);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Сообщить(СтрШаблон("Ошибка получения поля %1 описания соединения: %2", ТекПолеОбъекта.Имя, ТекстОшибки),
				                   СтатусСообщения.ОченьВажное);
				ЕстьОшибкиЗаполненияОписания = Истина;
				Прервать;
			КонецПопытки;
			Если ИмяПоля = "infobase" Тогда
				ОписаниеСоединения.Вставить("infobase-label", ОписанияИдИнформационныхБаз[ЗначениеЭлемента]);
			ИначеЕсли ИмяПоля = "process" Тогда
				ОписаниеСоединения.Вставить("process-label", "_none");
				ОписаниеСоединения.Вставить("process-host" , "_none");
				ОписаниеИдПроцесса = ОписанияИдРабочихПроцессов[ЗначениеЭлемента];
				Если ОписаниеИдПроцесса = Неопределено И НЕ ЗначениеЭлемента = ОбщегоНазначения.ПустойГУИД() Тогда
					ОписанияИдРабочихПроцессов = ОписанияИдРабочихПроцессов(Кластер, Истина);
					ОписаниеИдПроцесса = ОписанияИдРабочихПроцессов[ЗначениеЭлемента];
				КонецЕсли;
				Если НЕ ОписаниеИдПроцесса = Неопределено Тогда
					ОписаниеСоединения.Вставить("process-label", ОписаниеИдПроцесса.Метка);
					ОписаниеСоединения.Вставить("process-host" , ОписаниеИдПроцесса.Сервер);
				КонецЕсли;
			ИначеЕсли ИмяПоля = "connected-at" Тогда
				Попытка
					ОписаниеСоединения.Вставить("duration", ТекущаяДата() - ЗначениеЭлемента);
				Исключение
					ОписаниеСоединения.Вставить("duration", 0);
				КонецПопытки;
			ИначеЕсли ИмяПоля = "application" И Лев(ЗначениеЭлемента, 1) = """"  И Прав(ЗначениеЭлемента, 1) = """" Тогда
				ЗначениеЭлемента = Сред(ЗначениеЭлемента, 2, СтрДлина(ЗначениеЭлемента) - 2);
			КонецЕсли;
			ОписаниеСоединения.Вставить(ИмяПоля, ЗначениеЭлемента);

		КонецЦикла;

		Если ЕстьОшибкиЗаполненияОписания Тогда
			Продолжить;
		КонецЕсли;

		СоединенияКластера.Добавить(ОписаниеСоединения);

	КонецЦикла;

	Возврат СоединенияКластера;
	
КонецФункции // СоединенияКластера()

#КонецОбласти // ПолучениеДанныхСоединений

#Область СлужебныеПроцедурыИФункции

Функция ОписанияИдИнформационныхБаз(Знач Кластер, Знач ОбновитьПринудительно = Ложь)

	ОписанияИд = Новый Соответствие();
	
	СписокИБ = Кластер.ИнформационныеБазы().Список(, ОбновитьПринудительно);
	Для Каждого ТекИБ Из СписокИБ Цикл
		ОписанияИд.Вставить(ТекИБ.Ид(), ТекИб.Имя());
	КонецЦикла;

	Возврат ОписанияИд;

КонецФункции // ОписанияИдИнформационныхБаз()

Функция ОписанияИдРабочихПроцессов(Знач Кластер, Знач ОбновитьПринудительно = Ложь)

	ОписанияИд = Новый Соответствие();
	
	СписокПроцессов = Кластер.РабочиеПроцессы().Список(, ОбновитьПринудительно);
	Для Каждого ТекПроцесс Из СписокПроцессов Цикл
		ПоляПроцесса = Новый Структура("Метка, Сервер, Порт");
		ПоляПроцесса.Вставить("Сервер", ТекПроцесс.Получить("host"));
		ПоляПроцесса.Вставить("Порт"  , ТекПроцесс.Получить("port"));
		ПоляПроцесса.Вставить("Метка" , СтрШаблон("%1:%2", ПоляПроцесса.Сервер, ПоляПроцесса.Порт));

		ОписанияИд.Вставить(ТекПроцесс.Ид(), ПоляПроцесса);
	КонецЦикла;

	Возврат ОписанияИд;
	
КонецФункции // ОписанияИдРабочихПроцессов()

// Функция - создает, устанавливает настройки и возвращает объект управления кластером 1С
//
// Параметры:
//   ПараметрыПодключения    - Соответствие   - настройки подключения к агентам администрирования
//   Сервис                  - Строка         - адрес подключения к сервису администрирования (RAS) в виде <адрес>:<порт>
//
// Возвращаемое значение:
//   УправлениеКластером1С     - объект управления кластером 1С
//
Функция ИнициализироватьАгента(ПараметрыПодключения, Сервис)
	
	ПараметрыСервисов    = ОбщегоНазначения.ПолучитьЗначениеНастройки("ras"      , ПараметрыПодключения);
	ПараметрыПоУмолчанию = ОбщегоНазначения.ПолучитьЗначениеНастройки("__default", ПараметрыСервисов);
	ПараметрыПоИмени     = ОбщегоНазначения.ПолучитьЗначениеНастройки(Сервис     , ПараметрыСервисов);

	АдресСервисаПоУмолчанию  = ОбщегоНазначения.ПолучитьЗначениеНастройки("ras"       , ПараметрыПоУмолчанию);
	ВерсияКлиентаПоУмолчанию = ОбщегоНазначения.ПолучитьЗначениеНастройки("rac"       , ПараметрыПоУмолчанию);
	АдминистраторПоУмолчанию = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_name", ПараметрыПоУмолчанию);
	ПарольПоУмолчанию        = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_pwd" , ПараметрыПоУмолчанию);
	
	АдресСервисаПоИмени  = ОбщегоНазначения.ПолучитьЗначениеНастройки("ras"       , ПараметрыПоИмени);
	ВерсияКлиентаПоИмени = ОбщегоНазначения.ПолучитьЗначениеНастройки("rac"       , ПараметрыПоИмени);
	АдминистраторПоИмени = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_name", ПараметрыПоИмени);
	ПарольПоИмени        = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_pwd" , ПараметрыПоИмени);

	Если НЕ АдресСервисаПоИмени = Неопределено Тогда
		АдресСервиса = АдресСервисаПоИмени;
	ИначеЕсли НЕ АдресСервисаПоУмолчанию = Неопределено Тогда
		АдресСервиса = АдресСервисаПоУмолчанию;
	Иначе
		АдресСервиса      = "localhost:1545"; // RAS
	КонецЕсли;
	Если НЕ ВерсияКлиентаПоИмени = Неопределено Тогда
		ВерсияКлиента = ВерсияКлиентаПоИмени;
	ИначеЕсли НЕ ВерсияКлиентаПоУмолчанию = Неопределено Тогда
		ВерсияКлиента = ВерсияКлиентаПоУмолчанию;
	Иначе
		ВерсияКлиента     = "8.3"; // RAC
	КонецЕсли;

	АвторизацияАгента = Новый Структура("Администратор, Пароль", "", "");

	Если ЗначениеЗаполнено(АдминистраторПоИмени) Тогда
		АвторизацияАгента.Администратор = АдминистраторПоИмени;
		Если ЗначениеЗаполнено(ПарольПоИмени) Тогда
			АвторизацияАгента.Пароль = ПарольПоИмени;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(АдминистраторПоУмолчанию) Тогда
		АвторизацияАгента.Администратор = АдминистраторПоУмолчанию;
		Если ЗначениеЗаполнено(ПарольПоУмолчанию) Тогда
			АвторизацияАгента.Пароль = ПарольПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Возврат Новый УправлениеКластером1С(ВерсияКлиента, АдресСервиса, АвторизацияАгента);

КонецФункции // ИнициализироватьАгента()

Функция АгентДоступен(ОписаниеАгента)

	Поля = Новый Массив();
	Поля.Добавить("cluster");

	КластерыАгента = КластерыАгента(ОписаниеАгента.Агент, Поля);
	
	Попытка
		КоличествоКластеров = КластерыАгента.Количество();
	Исключение
		КоличествоКластеров = 0;
	КонецПопытки;

	Если КоличествоКластеров = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // АгентДоступен()

Функция ИспользоватьАгент(ОписаниеАгента)

	// Если агент не доступен, то он не может использоваться
	Если НЕ АгентДоступен(ОписаниеАгента) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Если резервируемый агент не указан, то это основной агент и используется всегда
	Если НЕ ЗначениеЗаполнено(ОписаниеАгента.Резервирует) Тогда
		Возврат Истина;
	КонецЕсли;

	// Если резервируемый агент не обнаружен, то используем текущий
	Если НЕ (ТипЗнч(Агенты[ОписаниеАгента.Резервирует]) = Тип("Структура")
	   И Агенты[ОписаниеАгента.Резервирует].Свойство("Агент")) Тогда
		Возврат Истина;
	КонецЕсли;

	// Если не удалось получить кластеры резервируемого агента
	// или других резервных агентов того же кластера, то используем текущий
	Для Каждого ТекАгент Из Агенты Цикл
		
		Если ОписаниеАгента.Имя = ТекАгент.Значение.Имя Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекАгент.Значение.Имя = ОписаниеАгента.Резервирует
		 ИЛИ ТекАгент.Значение.Резервирует = ОписаниеАгента.Резервирует Тогда
			Если АгентДоступен(ТекАгент.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции // ИспользоватьАгент()

// Процедура - устанавливает параметры кластеров агента из настроек
//
// Параметры:
//   УправлениеКластером   - УправлениеКластером1С  - объект управления кластером 1С
//   ПараметрыКластеров    - Соответствие           - настройки кластеров
//
Процедура УстановитьПараметрыКластеровАгента(УправлениеКластером, ПараметрыКластеров)
	
	Если ПараметрыКластеров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КластерыАгента = Неопределено;

	// TODO: Обход проблемы отсутствия вывода команды rac cluster list
	КоличествоПопыток = 3;
	ПопыткаПолучения = 1;
	КоэффициентОжиданияПопытки = 1500;
	НачалоПопыткиПолучения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока КластерыАгента = Неопределено И ПопыткаПолучения <= КоличествоПопыток Цикл
		КластерыАгента = УправлениеКластером.Кластеры().Список(, Истина);
		Если КластерыАгента = Неопределено Тогда
			Сообщить(СтрШаблон("Неудачная попытка (%1) получить список кластеров у сервиса администрирования ""%2"", ожидаем %3",
			                   ПопыткаПолучения,
			                   УправлениеКластером.СтрокаПодключения(),
			                   КоэффициентОжиданияПопытки * ПопыткаПолучения),
			         СтатусСообщения.ОченьВажное);
			Пока ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоПопыткиПолучения < КоэффициентОжиданияПопытки * ПопыткаПолучения Цикл
			КонецЦикла;
		Иначе
			Прервать;
		КонецЕсли;
		ПопыткаПолучения = ПопыткаПолучения + 1;
	КонецЦикла;

	Если КластерыАгента = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить список кластеров у сервиса администрирования ""%1""",
		                            УправлениеКластером.СтрокаПодключения());
	КонецЕсли;

	Для Каждого ТекКластер Из КластерыАгента Цикл
		УстановитьПараметрыКластера(ПараметрыКластеров, ТекКластер);
	КонецЦикла;

КонецПроцедуры // УстановитьПараметрыКластеровАгента()

// Процедура - устанавливает параметры кластера из настроек
//
// Параметры:
//   ПараметрыКластеров - Соответствие   - настройки кластеров
//   Кластер            - Кластер        - объект кластера 1С
//
Процедура УстановитьПараметрыКластера(ПараметрыКластеров, Кластер)
	
	ПараметрыПоУмолчанию = ОбщегоНазначения.ПолучитьЗначениеНастройки("__default", ПараметрыКластеров);
	МеткаКластера        = ВРег(СтрШаблон("%1:%2", Кластер.АдресСервера(), Кластер.ПортСервера()));
	ПараметрыПоИмени     = ОбщегоНазначения.ПолучитьЗначениеНастройки(МеткаКластера, ПараметрыКластеров);
	ПараметрыИБ          = ОбщегоНазначения.ПолучитьЗначениеНастройки("infobase", ПараметрыПоИмени);

	АдминистраторПоУмолчанию = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_name", ПараметрыПоУмолчанию);
	ПарольПоУмолчанию        = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_pwd" , ПараметрыПоУмолчанию);
	
	АдминистраторПоИмени = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_name", ПараметрыПоИмени);
	ПарольПоИмени        = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_pwd" , ПараметрыПоИмени);

	Если ЗначениеЗаполнено(АдминистраторПоИмени) Тогда
		Администратор = АдминистраторПоИмени;
		Если ЗначениеЗаполнено(ПарольПоИмени) Тогда
			Пароль = ПарольПоИмени;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(АдминистраторПоУмолчанию) Тогда
		Администратор = АдминистраторПоУмолчанию;
		Если ЗначениеЗаполнено(ПарольПоУмолчанию) Тогда
			Пароль = ПарольПоУмолчанию;
		КонецЕсли;
	Иначе
		Администратор = "";
		Пароль        = "";
	КонецЕсли;

	Кластер.УстановитьАдминистратора(Администратор, Пароль);

	Если НЕ ПараметрыИБ = Неопределено Тогда
		СписокИБ = Кластер.ИнформационныеБазы().Список();
		Для Каждого ТекИБ Из СписокИБ Цикл
			УстановитьПараметрыИБ(ПараметрыИБ, ТекИБ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьПараметрыКластера()

// Процедура - устанавливает параметры информационной базы из настроек
//
// Параметры:
//   ПараметрыИБ   - Соответствие        - настройки информационных баз
//   ИБ            - ИнформационнаяБаза  - объект информационной базы 1С
//
Процедура УстановитьПараметрыИБ(ПараметрыИБ, ИБ)
	
	ПараметрыПоУмолчанию = ОбщегоНазначения.ПолучитьЗначениеНастройки("__default", ПараметрыИБ);
	ПараметрыПоИмени = ОбщегоНазначения.ПолучитьЗначениеНастройки(ИБ.Имя(), ПараметрыИБ);

	АдминистраторПоУмолчанию = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_name", ПараметрыПоУмолчанию);
	ПарольПоУмолчанию        = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_pwd" , ПараметрыПоУмолчанию);
	
	АдминистраторПоИмени = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_name", ПараметрыПоИмени);
	ПарольПоИмени        = ОбщегоНазначения.ПолучитьЗначениеНастройки("admin_pwd" , ПараметрыПоИмени);

	Если ЗначениеЗаполнено(АдминистраторПоИмени) Тогда
		Администратор = АдминистраторПоИмени;
		Если ЗначениеЗаполнено(ПарольПоИмени) Тогда
			Пароль = ПарольПоИмени;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(АдминистраторПоУмолчанию) Тогда
		Администратор = АдминистраторПоУмолчанию;
		Если ЗначениеЗаполнено(ПарольПоУмолчанию) Тогда
			Пароль = ПарольПоУмолчанию;
		КонецЕсли;
	Иначе
		Администратор = "";
		Пароль        = "";
	КонецЕсли;

	ИБ.УстановитьАдминистратора(Администратор, Пароль);

КонецПроцедуры // УстановитьПараметрыИБ()

Функция НужноОбновитьОбъектыКластера(Знач ТипОбъекта, Знач ОбновитьПринудительно = Ложь)

	Если ОбновитьПринудительно Тогда
		Возврат Истина;
	КонецЕсли;

	Результат = Ложь;
	
	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Кластеры) Тогда
		Результат = (ОписанияКластеров = Неопределено);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Серверы) Тогда
		Результат = (ОписанияСерверов = Неопределено);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().РабочиеПроцессы) Тогда
		Результат = (ОписанияРабочихПроцессов = Неопределено);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().ИнформационныеБазы) Тогда
		Результат = (ОписанияИнформационныхБаз = Неопределено);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Сеансы) Тогда
		Результат = (ОписанияСеансов = Неопределено);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Соединения) Тогда
		Результат = (ОписанияСоединений = Неопределено);
	КонецЕсли;

	Возврат Результат;

КонецФункции // НужноОбновитьОбъектыКластера()

Функция ОбъектыАгента(Знач ОписаниеАгента, Знач ТипОбъекта, Знач Поля = "_all")

	Поля = ОбщегоНазначения.СписокПолей(Поля);

	Результат = Неопределено;

	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Кластеры) Тогда
		Результат = КластерыАгента(ОписаниеАгента.Агент, Поля);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Серверы) Тогда
		Результат = СерверыАгента(ОписаниеАгента.Агент, Поля);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().РабочиеПроцессы) Тогда
		Результат = ПроцессыАгента(ОписаниеАгента.Агент, Поля);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().ИнформационныеБазы) Тогда
		Результат = ИБАгента(ОписаниеАгента.Агент, Поля);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Сеансы) Тогда
		Результат = СеансыАгента(ОписаниеАгента.Агент, Поля);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера().Соединения) Тогда
		Результат = СоединенияАгента(ОписаниеАгента.Агент, Поля);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбъектыАгента()

Функция ТипыОбъектовКластера()

	Возврат Перечисления.РежимыАдминистрирования;

КонецФункции // ТипыОбъектовКластера()

#КонецОбласти // СлужебныеПроцедурыИФункции
