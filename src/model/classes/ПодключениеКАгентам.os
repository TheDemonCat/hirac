#Использовать irac

Перем Агенты;
Перем ПараметрыПодключения;

#Область ОбработчикиСобытийОбъекта

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//   НастройкиПодключения     - Строка,     - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура ПриСозданииОбъекта(Знач НастройкиПодключения = Неопределено)

	ИнициализироватьАгентыУправленияКластерами(НастройкиПодключения);

КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // ОбработчикиСобытийОбъекта

#Область ПрограммныйИнтерфейс

// Функция - возвращает структуру с подключениями к агентам управления кластерами
//
// Возвращаемое значение:
//   Структура     - структура с подключениями к агентам управления кластерами
//
Функция Агенты() Экспорт
	
	Возврат Агенты;

КонецФункции // Агенты()

// Функция - возвращает структуру параметров подключения к агентам управления кластерами
//
// Возвращаемое значение:
//   Структура     - структура параметров подключения к агентам управления кластерами
//
Функция ПараметрыПодключения() Экспорт
	
	Возврат ПараметрыПодключения;

КонецФункции // ПараметрыПодключения()

// Процедура инициализирует подключения к агентам управления кластерами
//
// Параметры:
//   НастройкиПодключения     - Строка,     - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура ИнициализироватьАгентыУправленияКластерами(Знач НастройкиПодключения = Неопределено) Экспорт
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Структура") Тогда
		ПараметрыПодключения = НастройкиПодключения;
	ИначеЕсли ТипЗнч(НастройкиПодключения) = Тип("Строка") Тогда
		ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзМакетаJSON(НастройкиПодключения, Истина);
	Иначе
		ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзМакетаJSON("/config/racsettings", Истина);
	КонецЕсли;

	Агенты = Новый Структура();

	Для Каждого ТекПараметры Из ПараметрыПодключения Цикл
	
		Если ТекПараметры.Ключ = "__default" И НЕ ПараметрыПодключения.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;

		УправлениеКластером = ИнициализироватьАгента(ПараметрыПодключения, ТекПараметры.Ключ);

		Агенты.Вставить(ТекПараметры.Ключ, УправлениеКластером);
	
	КонецЦикла;

КонецПроцедуры // ИнициализироватьАгентыУправленияКластерами()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Функция - создает, устанавливает настройки и возвращает объект управления кластером 1С
//
// Параметры:
//   ПараметрыПодключения    - Соответствие   - настройки подключения к агентам администрирования
//   Агент                   - Строка         - адрес подключения к агенту администрирования в виде <адрес>:<порт>
//
// Возвращаемое значение:
//   УправлениеКластером1С     - объект управления кластером 1С
//
Функция ИнициализироватьАгента(ПараметрыПодключения, Агент)
	
	ПараметрыПоУмолчанию = ПараметрыПодключения["__default"];
	ПараметрыПоИмени = ПараметрыПодключения[Агент];

	АдресRAS      = "localhost:1545";
	ВерсияRAC     = "8.3";
	Администратор = Новый Структура("Администратор, Пароль", "", "");

	Если НЕ ПараметрыПоУмолчанию = Неопределено Тогда
		Если НЕ ПараметрыПоУмолчанию["ras"] = Неопределено Тогда
			АдресRAS = ПараметрыПоУмолчанию["ras"];
		КонецЕсли;
		Если НЕ ПараметрыПоУмолчанию["rac"] = Неопределено Тогда
			ВерсияRAC = ПараметрыПоУмолчанию["rac"];
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыПоУмолчанию["admin_name"]) Тогда
			Администратор.Администратор = ПараметрыПоУмолчанию["admin_name"];
			Если ЗначениеЗаполнено(ПараметрыПоУмолчанию["admin_pwd"]) Тогда
				Администратор.Пароль = ПараметрыПоУмолчанию["admin_pwd"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ПараметрыПоИмени = Неопределено Тогда
		Если НЕ ПараметрыПоИмени["ras"] = Неопределено Тогда
			АдресRAS = ПараметрыПоИмени["ras"];
		КонецЕсли;
		Если НЕ ПараметрыПоИмени["rac"] = Неопределено Тогда
			ВерсияRAC = ПараметрыПоИмени["rac"];
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыПоИмени["admin_name"]) Тогда
			Администратор.Администратор = ПараметрыПоИмени["admin_name"];
			Если ЗначениеЗаполнено(ПараметрыПоИмени["admin_pwd"]) Тогда
				Администратор.Пароль = ПараметрыПоИмени["admin_pwd"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	УправлениеКластером = Новый УправлениеКластером1С(ВерсияRAC, АдресRAS, Администратор);

	Если НЕ (ПараметрыПоИмени = Неопределено ИЛИ ПараметрыПоИмени["cluster"] = Неопределено) Тогда
		Кластеры = УправлениеКластером.Кластеры().Список();
		Для Каждого ТекКластер Из Кластеры Цикл
			УстановитьПараметрыКластера(ПараметрыПоИмени["cluster"], ТекКластер);
		КонецЦикла;
	КонецЕсли;

	Возврат УправлениеКластером;

КонецФункции // ИнициализироватьАгента()

// Процедура - устанавливает параметры кластера из настроек
//
// Параметры:
//   ПараметрыКластеров - Соответствие   - настройки кластеров
//   Кластер            - Кластер        - объект кластера 1С
//
Процедура УстановитьПараметрыКластера(ПараметрыКластеров, Кластер)
	
	ПараметрыПоУмолчанию = ПараметрыКластеров["__default"];
	ПараметрыПоИмени     = ПараметрыКластеров[СтрШаблон("%1:%2", Кластер.АдресСервера(), Кластер.ПортСервера())];

	Администратор = "";
	Пароль        = "";

	Если НЕ ПараметрыПоУмолчанию = Неопределено Тогда
		Если ЗначениеЗаполнено(ПараметрыПоУмолчанию["admin_name"]) Тогда
			Администратор = ПараметрыПоУмолчанию["admin_name"];
			Если ЗначениеЗаполнено(ПараметрыПоУмолчанию["admin_pwd"]) Тогда
				Пароль = ПараметрыПоУмолчанию["admin_pwd"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ПараметрыПоИмени = Неопределено Тогда
		Если ЗначениеЗаполнено(ПараметрыПоИмени["admin_name"]) Тогда
			Администратор = ПараметрыПоИмени["admin_name"];
			Если ЗначениеЗаполнено(ПараметрыПоИмени["admin_pwd"]) Тогда
				Пароль = ПараметрыПоИмени["admin_pwd"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Кластер.УстановитьАдминистратора(Администратор, Пароль);

	Если НЕ (ПараметрыПоИмени = Неопределено ИЛИ ПараметрыПоИмени["infobase"] = Неопределено) Тогда
		СписокИБ = Кластер.ИнформационныеБазы().Список();
		Для Каждого ТекИБ Из СписокИБ Цикл
			УстановитьПараметрыИБ(ПараметрыПоИмени["infobase"], ТекИБ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьПараметрыКластера()

// Процедура - устанавливает параметры информационной базы из настроек
//
// Параметры:
//   ПараметрыИБ   - Соответствие        - настройки информационных баз
//   ИБ            - ИнформационнаяБаза  - объект информационной базы 1С
//
Процедура УстановитьПараметрыИБ(ПараметрыИБ, ИБ)
	
	ПараметрыПоУмолчанию = ПараметрыИБ["__default"];
	ПараметрыПоИмени     = ПараметрыИБ[ИБ.Имя()];

	Администратор = "";
	Пароль        = "";

	Если НЕ ПараметрыПоУмолчанию = Неопределено Тогда
		Если ЗначениеЗаполнено(ПараметрыПоУмолчанию["admin_name"]) Тогда
			Администратор = ПараметрыПоУмолчанию["admin_name"];
			Если ЗначениеЗаполнено(ПараметрыПоУмолчанию["admin_pwd"]) Тогда
				Пароль = ПараметрыПоУмолчанию["admin_pwd"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ПараметрыПоИмени = Неопределено Тогда
		Если ЗначениеЗаполнено(ПараметрыПоИмени["admin_name"]) Тогда
			Администратор = ПараметрыПоИмени["admin_name"];
			Если ЗначениеЗаполнено(ПараметрыПоИмени["admin_pwd"]) Тогда
				Пароль = ПараметрыПоИмени["admin_pwd"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ИБ.УстановитьАдминистратора(Администратор, Пароль);

КонецПроцедуры // УстановитьПараметрыИБ()

#КонецОбласти // СлужебныеПроцедурыИФункции
