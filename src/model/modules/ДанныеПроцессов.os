#Использовать irac

Перем ПодключениеКАгентам;
Перем Процессы;

#Область ПрограммныйИнтерфейс

// Процедура инициализирует подключение к агентам управления кластерами
//
// Параметры:
//   НастройкиПодключения     - Строка,     - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура Инициализировать(Знач НастройкиПодключения = Неопределено) Экспорт

	ПодключениеКАгентам = Новый ПодключениеКАгентам(НастройкиПодключения);

КонецПроцедуры // Инициализировать()

// Функция - возвращает объект-подключение к агентам кластера 1С
//
// Возвращаемое значение:
//   ПодключениеКАгентам     - объект-подключение к агентам кластера 1С
//
Функция ПодключениеКАгентам() Экспорт
	
	Возврат ПодключениеКАгентам;

КонецФункции // ПодключениеКАгентам()

Процедура ОбновитьПроцессы(Знач Поля = "_all", Знач Фильтр = Неопределено) Экспорт

	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		Поля = СтрРазделить(Поля, ",", Ложь);
		Для й = 0 По Поля.ВГраница() Цикл
			Поля[й] = ВРег(СокрЛП(Поля[й]));
		КонецЦикла;
	ИначеЕсли НЕ ТипЗнч(Поля) = Тип("Массив") Тогда
		Поля = Новый Массив();
		Поля.Добавить("_ALL");
	КонецЕсли;

	ДобавленныеПроцессы = Новый Соответствие();

	Процессы = Новый Массив();

	Для Каждого ТекАгент Из ПодключениеКАгентам.Агенты() Цикл

		ПроцессыАгента = ПроцессыАгента(ТекАгент.Значение, Поля);

		Для Каждого ТекПроцесс Из ПроцессыАгента Цикл
			Если ДобавленныеПроцессы[ТекПроцесс["process"]] = Неопределено Тогда
				ДобавленныеПроцессы.Вставить(ТекПроцесс["process"], Истина);
			Иначе
				Продолжить;
			КонецЕсли;

			Если НЕ ОбщегоНазначения.ОбъектСоответствуетФильтру(ТекПроцесс, Фильтр) Тогда
				Продолжить;
			КонецЕсли;

			Процессы.Добавить(ТекПроцесс);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьПроцессы()

Функция Процессы(Знач Поля = "_all", Знач Фильтр = Неопределено, Знач Первые = Неопределено, Знач Обновить = Ложь) Экспорт

	Если Обновить Тогда
		ОбновитьПроцессы(Поля, Фильтр);
	КонецЕсли;

	Если ТипЗнч(Первые) = Тип("Структура") И Первые.Количество > 0 Тогда
		Возврат ОбщегоНазначения.ПервыеПоЗначениюПоля(Процессы, Первые.ИмяПоля, Первые.Количество);
	КонецЕсли;

	Возврат Процессы;

КонецФункции // Процессы()

Функция Процесс(АдресСервера, ПортСервера, Знач Поля = "_all", Знач Обновить = Ложь) Экспорт

	Если Обновить Тогда
		ОбновитьПроцессы(Поля);
	КонецЕсли;

	Для Каждого ТекПроцесс Из Процессы Цикл
		Если ТекПроцесс["host"] = АдресСервера И ТекПроцесс["port"] = ПортСервера Тогда
			Возврат ТекПроцесс;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции // Процесс()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПолучениеДанныхСеансов

Функция ПроцессыАгента(Знач Агент, Знач Поля)

	ПроцессыАгента = Новый Массив();

	ДобавленныеКластеры = Новый Соответствие();

	Кластеры = Агент.Кластеры().Список();

	Для Каждого ТекКластер Из Кластеры Цикл
	
		Если ДобавленныеКластеры[ТекКластер.Ид()] = Неопределено Тогда
			ДобавленныеКластеры.Вставить(ТекКластер.Ид(), Истина);
		Иначе
			Продолжить;
		КонецЕсли;
	
		ПроцессыКластера = ПроцессыКластера(ТекКластер, Поля);

		Для Каждого ТекПроцесс Из ПроцессыКластера Цикл
			
			Если НЕ (Поля.Найти("AGENT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекПроцесс.Вставить("agent", СтрШаблон("%1:%2",
				                                     Агент.АдресСервераАдминистрирования(),
				                                     Агент.ПортСервераАдминистрирования()));
			КонецЕсли;
			Если НЕ (Поля.Найти("CLUSTER") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекПроцесс.Вставить("cluster", ТекКластер.Ид());
				ТекПроцесс.Вставить("cluster-label",
				                  СтрШаблон("%1:%2", ТекКластер.АдресСервера(), ТекКластер.ПортСервера()));
			КонецЕсли;
			Если НЕ (Поля.Найти("COUNT") = Неопределено И Поля.Найти("_ALL") = Неопределено) Тогда
				ТекПроцесс.Вставить("count", 1);
			КонецЕсли;

			ПроцессыАгента.Добавить(ТекПроцесс);

		КонецЦикла;

	КонецЦикла;

	Возврат ПроцессыАгента;

КонецФункции // ПроцессыАгента()

Функция ПроцессыКластера(Знач Кластер, Знач Поля)

	ПроцессыКластера = Новый Массив();

	СписокПроцессов = Кластер.Получить("Процессы").Список(, , Истина);

	ПоляПроцесса = Кластер.РабочиеПроцессы().ПараметрыОбъекта().ОписаниеСвойств("ИмяРАК");

	Для Каждого ТекПроцесс Из СписокПроцессов Цикл
		
		ОписаниеПроцесса = Новый Соответствие();

		Для Каждого ТекЭлемент Из ПоляПроцесса Цикл

			Если Поля.Найти(ВРег(ТекЭлемент.Ключ)) = Неопределено И Поля.Найти("_ALL") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеЭлемента = ТекПроцесс[ТекЭлемент.Значение.Имя];
			Если ТекЭлемент.Ключ = "process" Тогда
				ОписаниеПроцесса.Вставить("process-label", СтрШаблон("%1:%2",
				                                                     ТекПроцесс.Получить("АдресСервера"),
				                                                     ТекПроцесс.Получить("ПортСервера")));
			ИначеЕсли ТекЭлемент.Ключ = "started-at" Тогда
				ОписаниеПроцесса.Вставить("duration", ТекущаяДата() - ЗначениеЭлемента);
			КонецЕсли;
			ОписаниеПроцесса.Вставить(ТекЭлемент.Ключ, ЗначениеЭлемента);

		КонецЦикла;

		ПроцессыКластера.Добавить(ОписаниеПроцесса);

	КонецЦикла;

	Возврат ПроцессыКластера;
	
КонецФункции // ПроцессыКластера()

#КонецОбласти // ПолучениеДанныхСеансов

Инициализировать();
